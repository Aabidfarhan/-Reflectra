{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aabid\\\\chatbot-app\\\\src\\\\components\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport MicButton from './MicButton';\nimport ModeSelector from './ModeSelector';\nimport MessageList from './MessageList';\nimport ChatInput from './ChatInput';\nimport DarkModeToggle from './DarkModeToggle';\nimport TaskPanel from './TaskPanel';\nimport '../styles/ChatBot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [sessions, setSessions] = useState([{\n    id: 1,\n    name: 'Session 1',\n    messages: []\n  }]);\n  const [currentSessionId, setCurrentSessionId] = useState(1);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [mode, setMode] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [showTaskPanel, setShowTaskPanel] = useState(false);\n  const chatBoxRef = useRef(null);\n  const currentSession = sessions.find(s => s.id === currentSessionId);\n  useEffect(() => {\n    var _chatBoxRef$current;\n    (_chatBoxRef$current = chatBoxRef.current) === null || _chatBoxRef$current === void 0 ? void 0 : _chatBoxRef$current.scrollTo({\n      top: chatBoxRef.current.scrollHeight,\n      behavior: 'smooth'\n    });\n  }, [currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages, typing]);\n  const handleModeChange = selectedMode => {\n    setMode(selectedMode);\n    const taskModes = ['guided_journaling', 'distortion_detection', 'thought_deframing', 'affirmation_separator'];\n    if (taskModes.includes(selectedMode)) {\n      setShowTaskPanel(true);\n    } else {\n      setShowTaskPanel(false);\n    }\n  };\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      sender: 'me',\n      text: input\n    };\n    setInput('');\n    setSessions(prev => prev.map(s => s.id === currentSessionId ? {\n      ...s,\n      messages: [...s.messages, userMessage]\n    } : s));\n    if (!chatStarted) setChatStarted(true);\n    setTyping(true);\n    try {\n      const response = await fetch('https://0efd7e6df07d.ngrok-free.app/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input,\n          mode\n        })\n      });\n      if (!response.ok) throw new Error('API error');\n      const data = await response.json();\n      setTimeout(() => {\n        const aiMessage = {\n          sender: 'ai',\n          text: data.reply\n        };\n        setSessions(prev => prev.map(s => s.id === currentSessionId ? {\n          ...s,\n          messages: [...s.messages, aiMessage]\n        } : s));\n        setTyping(false);\n      }, 1200);\n    } catch (err) {\n      console.error('Connection error:', err);\n      const fallback = {\n        sender: 'ai',\n        text: \"⚠️ Sorry, I couldn't connect to the server. Try again later.\"\n      };\n      setSessions(prev => prev.map(s => s.id === currentSessionId ? {\n        ...s,\n        messages: [...s.messages, fallback]\n      } : s));\n      setTyping(false);\n    }\n  };\n  const handleVoiceInput = text => {\n    setInput(text);\n    setTimeout(() => sendMessage(), 10);\n  };\n  const clearChat = () => {\n    var _chatBoxRef$current2;\n    setSessions(prev => prev.map(s => s.id === currentSessionId ? {\n      ...s,\n      messages: []\n    } : s));\n    setChatStarted(false);\n    (_chatBoxRef$current2 = chatBoxRef.current) === null || _chatBoxRef$current2 === void 0 ? void 0 : _chatBoxRef$current2.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot-container ${darkMode ? 'dark' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(ModeSelector, {\n      setMode: handleModeChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DarkModeToggle, {\n      darkMode: darkMode,\n      setDarkMode: setDarkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `logo-container ${chatStarted ? 'minimized' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"logo-video\",\n        src: \"/logo.mp4\",\n        autoPlay: true,\n        muted: true,\n        loop: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area full-width\",\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages,\n        chatBoxRef: chatBoxRef,\n        typing: typing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        input: input,\n        setInput: setInput,\n        onSend: sendMessage,\n        onVoiceInput: handleVoiceInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearChat,\n        style: {\n          marginTop: '10px',\n          fontSize: '12px',\n          background: '#eee',\n          borderRadius: '8px',\n          padding: '6px 12px',\n          border: '1px solid #ccc'\n        },\n        children: \"\\uD83D\\uDDD1\\uFE0F Clear Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), showTaskPanel && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-panel-backdrop\",\n        onClick: () => setShowTaskPanel(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskPanel, {\n        mode: mode,\n        onClose: () => setShowTaskPanel(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"RD7tPTeyM5wWzN1MUcyPEuL9dow=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MicButton","ModeSelector","MessageList","ChatInput","DarkModeToggle","TaskPanel","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBot","_s","input","setInput","sessions","setSessions","id","name","messages","currentSessionId","setCurrentSessionId","chatStarted","setChatStarted","mode","setMode","darkMode","setDarkMode","typing","setTyping","showTaskPanel","setShowTaskPanel","chatBoxRef","currentSession","find","s","_chatBoxRef$current","current","scrollTo","top","scrollHeight","behavior","handleModeChange","selectedMode","taskModes","includes","sendMessage","trim","userMessage","sender","text","prev","map","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","data","json","setTimeout","aiMessage","reply","err","console","error","fallback","handleVoiceInput","clearChat","_chatBoxRef$current2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","autoPlay","muted","loop","playsInline","onSend","onVoiceInput","onClick","style","marginTop","fontSize","background","borderRadius","padding","border","onClose","_c","$RefreshReg$"],"sources":["C:/Users/aabid/chatbot-app/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport MicButton from './MicButton';\r\nimport ModeSelector from './ModeSelector';\r\nimport MessageList from './MessageList';\r\nimport ChatInput from './ChatInput';\r\nimport DarkModeToggle from './DarkModeToggle';\r\nimport TaskPanel from './TaskPanel';\r\n\r\nimport '../styles/ChatBot.css';\r\n\r\nconst ChatBot = () => {\r\n  const [input, setInput] = useState('');\r\n  const [sessions, setSessions] = useState([{ id: 1, name: 'Session 1', messages: [] }]);\r\n  const [currentSessionId, setCurrentSessionId] = useState(1);\r\n  const [chatStarted, setChatStarted] = useState(false);\r\n  const [mode, setMode] = useState('');\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [showTaskPanel, setShowTaskPanel] = useState(false);\r\n\r\n  const chatBoxRef = useRef(null);\r\n  const currentSession = sessions.find((s) => s.id === currentSessionId);\r\n\r\n  useEffect(() => {\r\n    chatBoxRef.current?.scrollTo({ top: chatBoxRef.current.scrollHeight, behavior: 'smooth' });\r\n  }, [currentSession?.messages, typing]);\r\n\r\n  const handleModeChange = (selectedMode) => {\r\n    setMode(selectedMode);\r\n\r\n    const taskModes = [\r\n      'guided_journaling',\r\n      'distortion_detection',\r\n      'thought_deframing',\r\n      'affirmation_separator',\r\n    ];\r\n\r\n    if (taskModes.includes(selectedMode)) {\r\n      setShowTaskPanel(true);\r\n    } else {\r\n      setShowTaskPanel(false);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { sender: 'me', text: input };\r\n    setInput('');\r\n    setSessions((prev) =>\r\n      prev.map((s) =>\r\n        s.id === currentSessionId ? { ...s, messages: [...s.messages, userMessage] } : s\r\n      )\r\n    );\r\n\r\n    if (!chatStarted) setChatStarted(true);\r\n    setTyping(true);\r\n\r\n    try {\r\n      const response = await fetch('https://0efd7e6df07d.ngrok-free.app/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message: input, mode }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error('API error');\r\n      const data = await response.json();\r\n\r\n      setTimeout(() => {\r\n        const aiMessage = { sender: 'ai', text: data.reply };\r\n        setSessions((prev) =>\r\n          prev.map((s) =>\r\n            s.id === currentSessionId ? { ...s, messages: [...s.messages, aiMessage] } : s\r\n          )\r\n        );\r\n        setTyping(false);\r\n      }, 1200);\r\n    } catch (err) {\r\n      console.error('Connection error:', err);\r\n      const fallback = {\r\n        sender: 'ai',\r\n        text: \"⚠️ Sorry, I couldn't connect to the server. Try again later.\",\r\n      };\r\n      setSessions((prev) =>\r\n        prev.map((s) =>\r\n          s.id === currentSessionId ? { ...s, messages: [...s.messages, fallback] } : s\r\n        )\r\n      );\r\n      setTyping(false);\r\n    }\r\n  };\r\n\r\n  const handleVoiceInput = (text) => {\r\n    setInput(text);\r\n    setTimeout(() => sendMessage(), 10);\r\n  };\r\n\r\n  const clearChat = () => {\r\n    setSessions((prev) =>\r\n      prev.map((s) =>\r\n        s.id === currentSessionId ? { ...s, messages: [] } : s\r\n      )\r\n    );\r\n    setChatStarted(false);\r\n    chatBoxRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\r\n  };\r\n\r\n  return (\r\n    <div className={`chatbot-container ${darkMode ? 'dark' : ''}`}>\r\n      <ModeSelector setMode={handleModeChange} />\r\n      <DarkModeToggle darkMode={darkMode} setDarkMode={setDarkMode} />\r\n\r\n      <div className={`logo-container ${chatStarted ? 'minimized' : ''}`}>\r\n        <video className=\"logo-video\" src=\"/logo.mp4\" autoPlay muted loop playsInline />\r\n      </div>\r\n\r\n      <div className=\"chat-area full-width\">\r\n        <MessageList messages={currentSession?.messages} chatBoxRef={chatBoxRef} typing={typing} />\r\n        <ChatInput\r\n          input={input}\r\n          setInput={setInput}\r\n          onSend={sendMessage}\r\n          onVoiceInput={handleVoiceInput}\r\n        />\r\n        <button\r\n          onClick={clearChat}\r\n          style={{\r\n            marginTop: '10px',\r\n            fontSize: '12px',\r\n            background: '#eee',\r\n            borderRadius: '8px',\r\n            padding: '6px 12px',\r\n            border: '1px solid #ccc',\r\n          }}\r\n        >\r\n          🗑️ Clear Chat\r\n        </button>\r\n      </div>\r\n\r\n      {showTaskPanel && (\r\n        <>\r\n          <div className=\"task-panel-backdrop\" onClick={() => setShowTaskPanel(false)} />\r\n          <TaskPanel mode={mode} onClose={() => setShowTaskPanel(false)} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}