{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aabid\\\\chatbot-app\\\\src\\\\components\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SessionManager from './SessionManager';\nimport MicButton from './MicButton';\nimport '../styles/ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [sessions, setSessions] = useState([{\n    id: 1,\n    name: 'Session 1',\n    messages: []\n  }]);\n  const [currentSessionId, setCurrentSessionId] = useState(1);\n  const [input, setInput] = useState('');\n  const chatBoxRef = useRef(null);\n  const currentSession = sessions.find(session => session.id === currentSessionId);\n  const sendMessage = () => {\n    if (!input.trim()) return;\n    const newMessage = {\n      sender: 'me',\n      text: input\n    };\n    const updatedSessions = sessions.map(session => {\n      if (session.id === currentSessionId) {\n        return {\n          ...session,\n          messages: [...session.messages, newMessage]\n        };\n      }\n      return session;\n    });\n    setSessions(updatedSessions);\n    setInput('');\n  };\n  const handleVoiceInput = text => setInput(text);\n  useEffect(() => {\n    var _chatBoxRef$current;\n    (_chatBoxRef$current = chatBoxRef.current) === null || _chatBoxRef$current === void 0 ? void 0 : _chatBoxRef$current.scrollTo({\n      top: chatBoxRef.current.scrollHeight,\n      behavior: 'smooth'\n    });\n  }, [currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(SessionManager, {\n      sessions: sessions,\n      currentSessionId: currentSessionId,\n      setCurrentSessionId: setCurrentSessionId,\n      setSessions: setSessions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        ref: chatBoxRef,\n        children: currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && sendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MicButton, {\n          onVoiceInput: handleVoiceInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"i8LwGcwEooNw03/fczP+G/yuOSY=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SessionManager","MicButton","jsxDEV","_jsxDEV","ChatBot","_s","sessions","setSessions","id","name","messages","currentSessionId","setCurrentSessionId","input","setInput","chatBoxRef","currentSession","find","session","sendMessage","trim","newMessage","sender","text","updatedSessions","map","handleVoiceInput","_chatBoxRef$current","current","scrollTo","top","scrollHeight","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","msg","index","type","placeholder","value","onChange","e","target","onKeyDown","key","onVoiceInput","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aabid/chatbot-app/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport SessionManager from './SessionManager';\r\nimport MicButton from './MicButton';\r\nimport '../styles/ChatBot.css';\r\n\r\nconst ChatBot = () => {\r\n  const [sessions, setSessions] = useState([{ id: 1, name: 'Session 1', messages: [] }]);\r\n  const [currentSessionId, setCurrentSessionId] = useState(1);\r\n  const [input, setInput] = useState('');\r\n  const chatBoxRef = useRef(null);\r\n\r\n  const currentSession = sessions.find(session => session.id === currentSessionId);\r\n\r\n  const sendMessage = () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessage = { sender: 'me', text: input };\r\n    const updatedSessions = sessions.map(session => {\r\n      if (session.id === currentSessionId) {\r\n        return { ...session, messages: [...session.messages, newMessage] };\r\n      }\r\n      return session;\r\n    });\r\n\r\n    setSessions(updatedSessions);\r\n    setInput('');\r\n  };\r\n\r\n  const handleVoiceInput = text => setInput(text);\r\n\r\n  useEffect(() => {\r\n    chatBoxRef.current?.scrollTo({ top: chatBoxRef.current.scrollHeight, behavior: 'smooth' });\r\n  }, [currentSession?.messages]);\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <SessionManager\r\n        sessions={sessions}\r\n        currentSessionId={currentSessionId}\r\n        setCurrentSessionId={setCurrentSessionId}\r\n        setSessions={setSessions}\r\n      />\r\n      <div className=\"chat-area\">\r\n        <div className=\"chat-box\" ref={chatBoxRef}>\r\n          {currentSession?.messages.map((msg, index) => (\r\n            <div key={index} className={`message ${msg.sender}`}>\r\n              {msg.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chat-input-area\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={input}\r\n            onChange={e => setInput(e.target.value)}\r\n            onKeyDown={e => e.key === 'Enter' && sendMessage()}\r\n          />\r\n          <MicButton onVoiceInput={handleVoiceInput} />\r\n          <button onClick={sendMessage}>âž¤</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}