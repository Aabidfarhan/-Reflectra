{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aabid\\\\chatbot-app\\\\src\\\\components\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SessionManager from './SessionManager';\nimport MicButton from './MicButton';\nimport '../styles/ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [sessions, setSessions] = useState([{\n    id: 1,\n    name: \"Session 1\",\n    messages: []\n  }]);\n  const [currentSessionId, setCurrentSessionId] = useState(1);\n  const chatBoxRef = useRef(null);\n  const currentSession = sessions.find(session => session.id === currentSessionId);\n  useEffect(() => {\n    var _chatBoxRef$current;\n    (_chatBoxRef$current = chatBoxRef.current) === null || _chatBoxRef$current === void 0 ? void 0 : _chatBoxRef$current.scrollTo({\n      top: chatBoxRef.current.scrollHeight,\n      behavior: 'smooth'\n    });\n  }, [currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      sender: 'me',\n      text: input\n    };\n    const updatedSessions = sessions.map(session => session.id === currentSessionId ? {\n      ...session,\n      messages: [...session.messages, userMessage]\n    } : session);\n    setSessions(updatedSessions);\n    try {\n      const response = await fetch('https://your-ngrok-url/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      const aiMessage = {\n        sender: 'ai',\n        text: data.reply\n      };\n      setSessions(prev => prev.map(session => session.id === currentSessionId ? {\n        ...session,\n        messages: [...session.messages, aiMessage]\n      } : session));\n    } catch (err) {\n      console.error(\"Error talking to AI:\", err);\n    }\n    setInput('');\n  };\n  const handleVoiceInput = text => setInput(text);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(SessionManager, {\n      sessions: sessions,\n      currentSessionId: currentSessionId,\n      setCurrentSessionId: setCurrentSessionId,\n      setSessions: setSessions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        ref: chatBoxRef,\n        children: currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ask me anything about your projects\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && sendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MicButton, {\n          onVoiceInput: handleVoiceInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"QmRIjDTqRGPgcUBvmIEK9FoRA8o=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SessionManager","MicButton","jsxDEV","_jsxDEV","ChatBot","_s","input","setInput","sessions","setSessions","id","name","messages","currentSessionId","setCurrentSessionId","chatBoxRef","currentSession","find","session","_chatBoxRef$current","current","scrollTo","top","scrollHeight","behavior","sendMessage","trim","userMessage","sender","text","updatedSessions","map","response","fetch","method","headers","body","JSON","stringify","message","data","json","aiMessage","reply","prev","err","console","error","handleVoiceInput","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","msg","index","type","placeholder","value","onChange","e","target","onKeyDown","key","onVoiceInput","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aabid/chatbot-app/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport SessionManager from './SessionManager';\r\nimport MicButton from './MicButton';\r\nimport '../styles/ChatBot.css';\r\n\r\nconst ChatBot = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [sessions, setSessions] = useState([\r\n    { id: 1, name: \"Session 1\", messages: [] }\r\n  ]);\r\n  const [currentSessionId, setCurrentSessionId] = useState(1);\r\n\r\n  const chatBoxRef = useRef(null);\r\n\r\n  const currentSession = sessions.find(\r\n    (session) => session.id === currentSessionId\r\n  );\r\n\r\n  useEffect(() => {\r\n    chatBoxRef.current?.scrollTo({\r\n      top: chatBoxRef.current.scrollHeight,\r\n      behavior: 'smooth'\r\n    });\r\n  }, [currentSession?.messages]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { sender: 'me', text: input };\r\n\r\n    const updatedSessions = sessions.map((session) =>\r\n      session.id === currentSessionId\r\n        ? { ...session, messages: [...session.messages, userMessage] }\r\n        : session\r\n    );\r\n    setSessions(updatedSessions);\r\n\r\n    try {\r\n      const response = await fetch('https://your-ngrok-url/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const aiMessage = { sender: 'ai', text: data.reply };\r\n\r\n      setSessions((prev) =>\r\n        prev.map((session) =>\r\n          session.id === currentSessionId\r\n            ? {\r\n                ...session,\r\n                messages: [...session.messages, aiMessage],\r\n              }\r\n            : session\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error(\"Error talking to AI:\", err);\r\n    }\r\n\r\n    setInput('');\r\n  };\r\n\r\n  const handleVoiceInput = (text) => setInput(text);\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <SessionManager\r\n        sessions={sessions}\r\n        currentSessionId={currentSessionId}\r\n        setCurrentSessionId={setCurrentSessionId}\r\n        setSessions={setSessions}\r\n      />\r\n\r\n      <div className=\"chat-area\">\r\n        <div className=\"chat-box\" ref={chatBoxRef}>\r\n          {currentSession?.messages.map((msg, index) => (\r\n            <div key={index} className={`message ${msg.sender}`}>\r\n              {msg.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"chat-input-area\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Ask me anything about your projects\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\r\n          />\r\n          <MicButton onVoiceInput={handleVoiceInput} />\r\n          <button onClick={sendMessage}>âž¤</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}