{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aabid\\\\chatbot-app\\\\src\\\\components\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./ChatBot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [sessions, setSessions] = useState([{\n    id: 1,\n    name: \"Session 1\",\n    messages: []\n  }]);\n  const [currentSessionId, setCurrentSessionId] = useState(1);\n  const [input, setInput] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const chatBoxRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const currentSession = sessions.find(s => s.id === currentSessionId);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      sender: \"user\",\n      text: input\n    };\n    updateSessionMessages([...currentSession.messages, userMessage]);\n    setInput(\"\");\n    try {\n      const res = await fetch(\"https://4cd1e6e50f99.ngrok-free.app/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await res.json();\n      const botMessage = {\n        sender: \"bot\",\n        text: data.reply\n      };\n      updateSessionMessages([...currentSession.messages, userMessage, botMessage]);\n    } catch {\n      const errorMsg = {\n        sender: \"bot\",\n        text: \"⚠️ Error connecting to the therapist.\"\n      };\n      updateSessionMessages([...currentSession.messages, userMessage, errorMsg]);\n    }\n  };\n  const updateSessionMessages = messages => {\n    setSessions(prevSessions => prevSessions.map(session => session.id === currentSessionId ? {\n      ...session,\n      messages\n    } : session));\n  };\n  useEffect(() => {\n    var _chatBoxRef$current;\n    (_chatBoxRef$current = chatBoxRef.current) === null || _chatBoxRef$current === void 0 ? void 0 : _chatBoxRef$current.scrollTo({\n      top: chatBoxRef.current.scrollHeight,\n      behavior: \"smooth\"\n    });\n  }, [sessions]);\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") sendMessage();\n  };\n  const createNewSession = () => {\n    const newId = sessions.length ? sessions[sessions.length - 1].id + 1 : 1;\n    const newSession = {\n      id: newId,\n      name: `Session ${newId}`,\n      messages: []\n    };\n    setSessions([...sessions, newSession]);\n    setCurrentSessionId(newId);\n  };\n  const toggleListening = () => {\n    if (!recognitionRef.current) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        alert(\"Speech Recognition not supported in this browser.\");\n        return;\n      }\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.interimResults = false;\n      recognition.maxAlternatives = 1;\n      recognition.onresult = event => {\n        const speechToText = event.results[0][0].transcript;\n        setInput(prev => prev ? prev + \" \" + speechToText : speechToText);\n      };\n      recognition.onerror = event => {\n        console.error(\"Speech recognition error:\", event.error);\n        setIsListening(false);\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      recognitionRef.current = recognition;\n    }\n    if (!isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    } else {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-fullscreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"session-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDDC2 Sessions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: sessions.map(session => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: session.id === currentSessionId ? \"active\" : \"\",\n          onClick: () => setCurrentSessionId(session.id),\n          children: session.name\n        }, session.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-session-btn\",\n        onClick: createNewSession,\n        children: \"+ New Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: \"\\uD83E\\uDDE0 AI Therapist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        ref: chatBoxRef,\n        children: currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-bubble\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: handleKeyPress,\n          placeholder: \"Type or use the mic...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `mic-btn ${isListening ? \"listening\" : \"\"}`,\n          onClick: toggleListening,\n          children: \"\\uD83C\\uDFA4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"Hz0mT8SEi+wLnhfWg4aAKilNLco=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","ChatBot","_s","sessions","setSessions","id","name","messages","currentSessionId","setCurrentSessionId","input","setInput","isListening","setIsListening","chatBoxRef","recognitionRef","currentSession","find","s","sendMessage","trim","userMessage","sender","text","updateSessionMessages","res","fetch","method","headers","body","JSON","stringify","message","data","json","botMessage","reply","errorMsg","prevSessions","map","session","_chatBoxRef$current","current","scrollTo","top","scrollHeight","behavior","handleKeyPress","e","key","createNewSession","newId","length","newSession","toggleListening","SpeechRecognition","window","webkitSpeechRecognition","alert","recognition","lang","interimResults","maxAlternatives","onresult","event","speechToText","results","transcript","prev","onerror","console","error","onend","start","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","msg","index","type","value","onChange","target","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/aabid/chatbot-app/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./ChatBot.css\";\r\n\r\nconst ChatBot = () => {\r\n  const [sessions, setSessions] = useState([{ id: 1, name: \"Session 1\", messages: [] }]);\r\n  const [currentSessionId, setCurrentSessionId] = useState(1);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isListening, setIsListening] = useState(false);\r\n  const chatBoxRef = useRef(null);\r\n  const recognitionRef = useRef(null);\r\n\r\n  const currentSession = sessions.find((s) => s.id === currentSessionId);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { sender: \"user\", text: input };\r\n    updateSessionMessages([...currentSession.messages, userMessage]);\r\n    setInput(\"\");\r\n\r\n    try {\r\n      const res = await fetch(\"https://4cd1e6e50f99.ngrok-free.app/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      const botMessage = { sender: \"bot\", text: data.reply };\r\n      updateSessionMessages([...currentSession.messages, userMessage, botMessage]);\r\n    } catch {\r\n      const errorMsg = { sender: \"bot\", text: \"⚠️ Error connecting to the therapist.\" };\r\n      updateSessionMessages([...currentSession.messages, userMessage, errorMsg]);\r\n    }\r\n  };\r\n\r\n  const updateSessionMessages = (messages) => {\r\n    setSessions((prevSessions) =>\r\n      prevSessions.map((session) =>\r\n        session.id === currentSessionId ? { ...session, messages } : session\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    chatBoxRef.current?.scrollTo({\r\n      top: chatBoxRef.current.scrollHeight,\r\n      behavior: \"smooth\",\r\n    });\r\n  }, [sessions]);\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") sendMessage();\r\n  };\r\n\r\n  const createNewSession = () => {\r\n    const newId = sessions.length ? sessions[sessions.length - 1].id + 1 : 1;\r\n    const newSession = { id: newId, name: `Session ${newId}`, messages: [] };\r\n    setSessions([...sessions, newSession]);\r\n    setCurrentSessionId(newId);\r\n  };\r\n\r\n  const toggleListening = () => {\r\n    if (!recognitionRef.current) {\r\n      const SpeechRecognition =\r\n        window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      if (!SpeechRecognition) {\r\n        alert(\"Speech Recognition not supported in this browser.\");\r\n        return;\r\n      }\r\n\r\n      const recognition = new SpeechRecognition();\r\n      recognition.lang = \"en-US\";\r\n      recognition.interimResults = false;\r\n      recognition.maxAlternatives = 1;\r\n\r\n      recognition.onresult = (event) => {\r\n        const speechToText = event.results[0][0].transcript;\r\n        setInput((prev) => (prev ? prev + \" \" + speechToText : speechToText));\r\n      };\r\n\r\n      recognition.onerror = (event) => {\r\n        console.error(\"Speech recognition error:\", event.error);\r\n        setIsListening(false);\r\n      };\r\n\r\n      recognition.onend = () => {\r\n        setIsListening(false);\r\n      };\r\n\r\n      recognitionRef.current = recognition;\r\n    }\r\n\r\n    if (!isListening) {\r\n      recognitionRef.current.start();\r\n      setIsListening(true);\r\n    } else {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-fullscreen\">\r\n      {/* Session Manager */}\r\n      <aside className=\"session-panel\">\r\n        <h2>🗂 Sessions</h2>\r\n        <ul>\r\n          {sessions.map((session) => (\r\n            <li\r\n              key={session.id}\r\n              className={session.id === currentSessionId ? \"active\" : \"\"}\r\n              onClick={() => setCurrentSessionId(session.id)}\r\n            >\r\n              {session.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <button className=\"new-session-btn\" onClick={createNewSession}>+ New Session</button>\r\n      </aside>\r\n\r\n      {/* Chat Area */}\r\n      <div className=\"chatbot-container\">\r\n        <header className=\"chat-header\">🧠 AI Therapist</header>\r\n        <div className=\"chat-box\" ref={chatBoxRef}>\r\n          {currentSession?.messages.map((msg, index) => (\r\n            <div key={index} className={`chat-message ${msg.sender}`}>\r\n              <div className=\"chat-bubble\">{msg.text}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chat-input-area\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={handleKeyPress}\r\n            placeholder=\"Type or use the mic...\"\r\n          />\r\n          <button className={`mic-btn ${isListening ? \"listening\" : \"\"}`} onClick={toggleListening}>\r\n            🎤\r\n          </button>\r\n          <button onClick={sendMessage}>➤</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}