{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aabid\\\\chatbot-app\\\\src\\\\components\\\\ChatInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport MicButton from './MicButton';\nimport '../styles/ChatBot.css';\nimport '../styles/ModeSelector.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst modeMap = {\n  default: '💬 Default',\n  guided_journaling: '📝 Guided Journaling',\n  distortion_detection: '🔍 Distortion Detection',\n  thought_deframing: '🧠 Thought Deframing',\n  affirmation_separator: '🌟 Affirmation Separator'\n};\nconst ChatInput = ({\n  input,\n  setInput,\n  onSend,\n  onVoiceInput,\n  setMode\n}) => {\n  _s();\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [selectedMode, setSelectedMode] = useState('default');\n  const dropdownRef = useRef(null);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {\n        setShowDropdown(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  const handleModeSelect = mode => {\n    setMode(mode);\n    setSelectedMode(mode);\n    setShowDropdown(false);\n  };\n  const handleSend = () => {\n    if (!input.trim()) return;\n    let formattedInput;\n    switch (selectedMode) {\n      case 'guided_journaling':\n        formattedInput = `Here's my journal entry:\\n${input}`;\n        break;\n      case 'distortion_detection':\n        formattedInput = `Can you check if this has cognitive distortions?\\n${input}`;\n        break;\n      case 'thought_deframing':\n        formattedInput = `Help me reframe this thought:\\n${input}`;\n        break;\n      case 'affirmation_separator':\n        formattedInput = `Please extract affirmations from this:\\n${input}`;\n        break;\n      default:\n        formattedInput = input;\n    }\n    setInput(formattedInput);\n    setTimeout(onSend, 0); // ensure state updates before sending\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-input-area responsive-chat-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-selector-inline\",\n      ref: dropdownRef,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dropdown-trigger\",\n        onClick: () => setShowDropdown(prev => !prev),\n        children: modeMap[selectedMode]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-menu\",\n        children: Object.entries(modeMap).map(([key, label]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-item\",\n          onClick: () => handleModeSelect(key),\n          children: label\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Ask me anything...\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      onKeyDown: e => e.key === 'Enter' && handleSend()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"\\u27A4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MicButton, {\n      onVoiceInput: text => {\n        setInput(text);\n        setTimeout(handleSend, 10);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInput, \"YObdFPJk6jvSXD9Pmx9ncxRVnIY=\");\n_c = ChatInput;\nexport default ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MicButton","jsxDEV","_jsxDEV","modeMap","default","guided_journaling","distortion_detection","thought_deframing","affirmation_separator","ChatInput","input","setInput","onSend","onVoiceInput","setMode","_s","showDropdown","setShowDropdown","selectedMode","setSelectedMode","dropdownRef","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","handleModeSelect","mode","handleSend","trim","formattedInput","setTimeout","className","children","ref","onClick","prev","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","key","label","type","placeholder","value","onChange","onKeyDown","text","_c","$RefreshReg$"],"sources":["C:/Users/aabid/chatbot-app/src/components/ChatInput.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport MicButton from './MicButton';\r\nimport '../styles/ChatBot.css';\r\nimport '../styles/ModeSelector.css';\r\n\r\nconst modeMap = {\r\n  default: '💬 Default',\r\n  guided_journaling: '📝 Guided Journaling',\r\n  distortion_detection: '🔍 Distortion Detection',\r\n  thought_deframing: '🧠 Thought Deframing',\r\n  affirmation_separator: '🌟 Affirmation Separator'\r\n};\r\n\r\nconst ChatInput = ({ input, setInput, onSend, onVoiceInput, setMode }) => {\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [selectedMode, setSelectedMode] = useState('default');\r\n  const dropdownRef = useRef(null);\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (e) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {\r\n        setShowDropdown(false);\r\n      }\r\n    };\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const handleModeSelect = (mode) => {\r\n    setMode(mode);\r\n    setSelectedMode(mode);\r\n    setShowDropdown(false);\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (!input.trim()) return;\r\n\r\n    let formattedInput;\r\n    switch (selectedMode) {\r\n      case 'guided_journaling':\r\n        formattedInput = `Here's my journal entry:\\n${input}`;\r\n        break;\r\n      case 'distortion_detection':\r\n        formattedInput = `Can you check if this has cognitive distortions?\\n${input}`;\r\n        break;\r\n      case 'thought_deframing':\r\n        formattedInput = `Help me reframe this thought:\\n${input}`;\r\n        break;\r\n      case 'affirmation_separator':\r\n        formattedInput = `Please extract affirmations from this:\\n${input}`;\r\n        break;\r\n      default:\r\n        formattedInput = input;\r\n    }\r\n\r\n    setInput(formattedInput);\r\n    setTimeout(onSend, 0); // ensure state updates before sending\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-input-area responsive-chat-input\">\r\n      <div className=\"mode-selector-inline\" ref={dropdownRef}>\r\n        <button\r\n          className=\"dropdown-trigger\"\r\n          onClick={() => setShowDropdown((prev) => !prev)}\r\n        >\r\n          {modeMap[selectedMode]}\r\n        </button>\r\n\r\n        {showDropdown && (\r\n          <div className=\"dropdown-menu\">\r\n            {Object.entries(modeMap).map(([key, label]) => (\r\n              <div\r\n                key={key}\r\n                className=\"dropdown-item\"\r\n                onClick={() => handleModeSelect(key)}\r\n              >\r\n                {label}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Ask me anything...\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyDown={(e) => e.key === 'Enter' && handleSend()}\r\n      />\r\n\r\n      <button onClick={handleSend}>➤</button>\r\n\r\n      <MicButton\r\n        onVoiceInput={(text) => {\r\n          setInput(text);\r\n          setTimeout(handleSend, 10);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}