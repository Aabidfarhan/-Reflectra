{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aabid\\\\chatbot-app\\\\src\\\\components\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n// import SessionManager from './SessionManager'; // Optional\nimport MicButton from './MicButton';\nimport '../styles/ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [sessions, setSessions] = useState([{\n    id: 1,\n    name: 'Session 1',\n    messages: []\n  }]);\n  const [currentSessionId, setCurrentSessionId] = useState(1);\n  const [chatStarted, setChatStarted] = useState(false);\n  const chatBoxRef = useRef(null);\n  const currentSession = sessions.find(session => session.id === currentSessionId);\n  useEffect(() => {\n    var _chatBoxRef$current;\n    (_chatBoxRef$current = chatBoxRef.current) === null || _chatBoxRef$current === void 0 ? void 0 : _chatBoxRef$current.scrollTo({\n      top: chatBoxRef.current.scrollHeight,\n      behavior: 'smooth'\n    });\n  }, [currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      sender: 'me',\n      text: input\n    };\n    setInput(''); // ✅ Clear input immediately\n\n    const updatedSessions = sessions.map(session => session.id === currentSessionId ? {\n      ...session,\n      messages: [...session.messages, userMessage]\n    } : session);\n    setSessions(updatedSessions);\n    if (!chatStarted) setChatStarted(true);\n    try {\n      const response = await fetch('https://39b48d3e6356.ngrok-free.app/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      if (!response.ok) throw new Error('API error');\n      const data = await response.json();\n      const aiMessage = {\n        sender: 'ai',\n        text: data.reply\n      };\n      setSessions(prev => prev.map(session => session.id === currentSessionId ? {\n        ...session,\n        messages: [...session.messages, aiMessage]\n      } : session));\n    } catch (err) {\n      console.error('Error connecting to AI:', err);\n      const fallbackMessage = {\n        sender: 'ai',\n        text: \"⚠️ Sorry, I couldn't connect to the server. Please try again later.\"\n      };\n      setSessions(prev => prev.map(session => session.id === currentSessionId ? {\n        ...session,\n        messages: [...session.messages, fallbackMessage]\n      } : session));\n    }\n  };\n  const handleVoiceInput = text => {\n    setInput(text);\n\n    // Auto-send after short delay to let input update visually\n    setTimeout(() => {\n      sendMessage();\n    }, 10); // 300ms delay is smooth\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `logo-container ${chatStarted ? 'minimized' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"logo-video\",\n        src: \"/logo.mp4\",\n        autoPlay: true,\n        muted: true,\n        loop: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area full-width\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        ref: chatBoxRef,\n        children: currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ask me anything...\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && sendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MicButton, {\n          onVoiceInput: handleVoiceInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"wFu4VwLaCF7pc+YMB0uBTrcVQ40=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MicButton","jsxDEV","_jsxDEV","ChatBot","_s","input","setInput","sessions","setSessions","id","name","messages","currentSessionId","setCurrentSessionId","chatStarted","setChatStarted","chatBoxRef","currentSession","find","session","_chatBoxRef$current","current","scrollTo","top","scrollHeight","behavior","sendMessage","trim","userMessage","sender","text","updatedSessions","map","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","data","json","aiMessage","reply","prev","err","console","error","fallbackMessage","handleVoiceInput","setTimeout","className","children","src","autoPlay","muted","loop","playsInline","fileName","_jsxFileName","lineNumber","columnNumber","ref","msg","index","type","placeholder","value","onChange","e","target","onKeyDown","key","onVoiceInput","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aabid/chatbot-app/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n// import SessionManager from './SessionManager'; // Optional\r\nimport MicButton from './MicButton';\r\nimport '../styles/ChatBot.css';\r\n\r\nconst ChatBot = () => {\r\n  const [input, setInput] = useState('');\r\n  const [sessions, setSessions] = useState([\r\n    { id: 1, name: 'Session 1', messages: [] },\r\n  ]);\r\n  const [currentSessionId, setCurrentSessionId] = useState(1);\r\n  const [chatStarted, setChatStarted] = useState(false);\r\n  const chatBoxRef = useRef(null);\r\n\r\n  const currentSession = sessions.find(\r\n    (session) => session.id === currentSessionId\r\n  );\r\n\r\n  useEffect(() => {\r\n    chatBoxRef.current?.scrollTo({\r\n      top: chatBoxRef.current.scrollHeight,\r\n      behavior: 'smooth',\r\n    });\r\n  }, [currentSession?.messages]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { sender: 'me', text: input };\r\n    setInput(''); // ✅ Clear input immediately\r\n\r\n    const updatedSessions = sessions.map((session) =>\r\n      session.id === currentSessionId\r\n        ? { ...session, messages: [...session.messages, userMessage] }\r\n        : session\r\n    );\r\n    setSessions(updatedSessions);\r\n\r\n    if (!chatStarted) setChatStarted(true);\r\n\r\n    try {\r\n      const response = await fetch('https://39b48d3e6356.ngrok-free.app/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error('API error');\r\n      const data = await response.json();\r\n      const aiMessage = { sender: 'ai', text: data.reply };\r\n\r\n      setSessions((prev) =>\r\n        prev.map((session) =>\r\n          session.id === currentSessionId\r\n            ? {\r\n              ...session,\r\n              messages: [...session.messages, aiMessage],\r\n            }\r\n            : session\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error('Error connecting to AI:', err);\r\n\r\n      const fallbackMessage = {\r\n        sender: 'ai',\r\n        text: \"⚠️ Sorry, I couldn't connect to the server. Please try again later.\",\r\n      };\r\n\r\n      setSessions((prev) =>\r\n        prev.map((session) =>\r\n          session.id === currentSessionId\r\n            ? {\r\n              ...session,\r\n              messages: [...session.messages, fallbackMessage],\r\n            }\r\n            : session\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleVoiceInput = (text) => {\r\n    setInput(text);\r\n\r\n    // Auto-send after short delay to let input update visually\r\n    setTimeout(() => {\r\n      sendMessage();\r\n    }, 10); // 300ms delay is smooth\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      {/* Animated Logo */}\r\n      <div className={`logo-container ${chatStarted ? 'minimized' : ''}`}>\r\n        <video\r\n          className=\"logo-video\"\r\n          src=\"/logo.mp4\"\r\n          autoPlay\r\n          muted\r\n          loop\r\n          playsInline\r\n        />\r\n      </div>\r\n\r\n      <div className=\"chat-area full-width\">\r\n        <div className=\"chat-box\" ref={chatBoxRef}>\r\n          {currentSession?.messages.map((msg, index) => (\r\n            <div key={index} className={`message ${msg.sender}`}>\r\n              {msg.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"chat-input-area\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Ask me anything...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\r\n          />\r\n          <MicButton onVoiceInput={handleVoiceInput} />\r\n          <button onClick={sendMessage}>➤</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}