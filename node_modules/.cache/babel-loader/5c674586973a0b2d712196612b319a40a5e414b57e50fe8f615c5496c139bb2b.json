{"ast":null,"code":"const sendMessage = async () => {\n  if (!input.trim()) return;\n  const userMessage = {\n    sender: 'me',\n    text: input\n  };\n  const updatedSessions = sessions.map(session => session.id === currentSessionId ? {\n    ...session,\n    messages: [...session.messages, userMessage]\n  } : session);\n  setSessions(updatedSessions);\n  const res = await fetch('https://xxxxx.ngrok.io/chat', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: input\n    })\n  });\n  const data = await res.json();\n  const aiMessage = {\n    sender: 'ai',\n    text: data.reply\n  };\n  setSessions(prev => prev.map(session => session.id === currentSessionId ? {\n    ...session,\n    messages: [...session.messages, aiMessage]\n  } : session));\n  setInput('');\n};","map":{"version":3,"names":["sendMessage","input","trim","userMessage","sender","text","updatedSessions","sessions","map","session","id","currentSessionId","messages","setSessions","res","fetch","method","headers","body","JSON","stringify","message","data","json","aiMessage","reply","prev","setInput"],"sources":["C:/Users/aabid/chatbot-app/src/components/ChatBot.jsx"],"sourcesContent":["const sendMessage = async () => {\r\n  if (!input.trim()) return;\r\n\r\n  const userMessage = { sender: 'me', text: input };\r\n\r\n  const updatedSessions = sessions.map(session =>\r\n    session.id === currentSessionId\r\n      ? { ...session, messages: [...session.messages, userMessage] }\r\n      : session\r\n  );\r\n  setSessions(updatedSessions);\r\n\r\n  const res = await fetch('https://xxxxx.ngrok.io/chat', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ message: input }),\r\n  });\r\n\r\n  const data = await res.json();\r\n  const aiMessage = { sender: 'ai', text: data.reply };\r\n\r\n  setSessions(prev =>\r\n    prev.map(session =>\r\n      session.id === currentSessionId\r\n        ? { ...session, messages: [...session.messages, aiMessage] }\r\n        : session\r\n    )\r\n  );\r\n  setInput('');\r\n};\r\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;EAEnB,MAAMC,WAAW,GAAG;IAAEC,MAAM,EAAE,IAAI;IAAEC,IAAI,EAAEJ;EAAM,CAAC;EAEjD,MAAMK,eAAe,GAAGC,QAAQ,CAACC,GAAG,CAACC,OAAO,IAC1CA,OAAO,CAACC,EAAE,KAAKC,gBAAgB,GAC3B;IAAE,GAAGF,OAAO;IAAEG,QAAQ,EAAE,CAAC,GAAGH,OAAO,CAACG,QAAQ,EAAET,WAAW;EAAE,CAAC,GAC5DM,OACN,CAAC;EACDI,WAAW,CAACP,eAAe,CAAC;EAE5B,MAAMQ,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IACrDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAEpB;IAAM,CAAC;EACzC,CAAC,CAAC;EAEF,MAAMqB,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;EAC7B,MAAMC,SAAS,GAAG;IAAEpB,MAAM,EAAE,IAAI;IAAEC,IAAI,EAAEiB,IAAI,CAACG;EAAM,CAAC;EAEpDZ,WAAW,CAACa,IAAI,IACdA,IAAI,CAAClB,GAAG,CAACC,OAAO,IACdA,OAAO,CAACC,EAAE,KAAKC,gBAAgB,GAC3B;IAAE,GAAGF,OAAO;IAAEG,QAAQ,EAAE,CAAC,GAAGH,OAAO,CAACG,QAAQ,EAAEY,SAAS;EAAE,CAAC,GAC1Df,OACN,CACF,CAAC;EACDkB,QAAQ,CAAC,EAAE,CAAC;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}