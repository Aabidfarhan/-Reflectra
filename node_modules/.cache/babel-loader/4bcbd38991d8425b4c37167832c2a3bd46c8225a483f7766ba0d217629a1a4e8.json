{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aabid\\\\chatbot-app\\\\src\\\\components\\\\SessionManager.jsx\";\nimport React from 'react';\nimport '../styles/SessionManager.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SessionManager = ({\n  sessions,\n  currentSessionId,\n  setCurrentSessionId,\n  setSessions\n}) => {\n  const createSession = () => {\n    const newId = sessions.length + 1;\n    setSessions([...sessions, {\n      id: newId,\n      name: `Session ${newId}`,\n      messages: []\n    }]);\n    setCurrentSessionId(newId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"session-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sessions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), sessions.map(session => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `session-item ${session.id === currentSessionId ? 'active' : ''}`,\n      onClick: () => setCurrentSessionId(session.id),\n      children: session.name\n    }, session.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createSession,\n      children: \"+ New Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c = SessionManager;\nexport default SessionManager;\nvar _c;\n$RefreshReg$(_c, \"SessionManager\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SessionManager","sessions","currentSessionId","setCurrentSessionId","setSessions","createSession","newId","length","id","name","messages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","session","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aabid/chatbot-app/src/components/SessionManager.jsx"],"sourcesContent":["import React from 'react';\r\nimport '../styles/SessionManager.css';\r\n\r\nconst SessionManager = ({ sessions, currentSessionId, setCurrentSessionId, setSessions }) => {\r\n  const createSession = () => {\r\n    const newId = sessions.length + 1;\r\n    setSessions([...sessions, { id: newId, name: `Session ${newId}`, messages: [] }]);\r\n    setCurrentSessionId(newId);\r\n  };\r\n\r\n  return (\r\n    <div className=\"session-manager\">\r\n      <h3>Sessions</h3>\r\n      {sessions.map(session => (\r\n        <div\r\n          key={session.id}\r\n          className={`session-item ${session.id === currentSessionId ? 'active' : ''}`}\r\n          onClick={() => setCurrentSessionId(session.id)}\r\n        >\r\n          {session.name}\r\n        </div>\r\n      ))}\r\n      <button onClick={createSession}>+ New Session</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SessionManager;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,gBAAgB;EAAEC,mBAAmB;EAAEC;AAAY,CAAC,KAAK;EAC3F,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,KAAK,GAAGL,QAAQ,CAACM,MAAM,GAAG,CAAC;IACjCH,WAAW,CAAC,CAAC,GAAGH,QAAQ,EAAE;MAAEO,EAAE,EAAEF,KAAK;MAAEG,IAAI,EAAE,WAAWH,KAAK,EAAE;MAAEI,QAAQ,EAAE;IAAG,CAAC,CAAC,CAAC;IACjFP,mBAAmB,CAACG,KAAK,CAAC;EAC5B,CAAC;EAED,oBACEP,OAAA;IAAKY,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9Bb,OAAA;MAAAa,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChBf,QAAQ,CAACgB,GAAG,CAACC,OAAO,iBACnBnB,OAAA;MAEEY,SAAS,EAAE,gBAAgBO,OAAO,CAACV,EAAE,KAAKN,gBAAgB,GAAG,QAAQ,GAAG,EAAE,EAAG;MAC7EiB,OAAO,EAAEA,CAAA,KAAMhB,mBAAmB,CAACe,OAAO,CAACV,EAAE,CAAE;MAAAI,QAAA,EAE9CM,OAAO,CAACT;IAAI,GAJRS,OAAO,CAACV,EAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKZ,CACN,CAAC,eACFjB,OAAA;MAAQoB,OAAO,EAAEd,aAAc;MAAAO,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAACI,EAAA,GAtBIpB,cAAc;AAwBpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}